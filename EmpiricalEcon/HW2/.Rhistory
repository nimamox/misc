install.packages(lmtest)
install.packages("lmtest")
library(lmtest)
x <- c(1:30)
y1 <- 1 + x + x^2 + rnorm(30)
y2 <- 1 + x + rnorm(30)
resettest(y1 ~ x, power=2, type="regressor")
resettest(y2 ~ x, power=2, type="regressor")
library(lmtest)
x <- c(1:30)
y1 <- 1 + x + x^2 + rnorm(30)
y2 <- 1 + x + rnorm(30)
resettest(y1 ~ x, power=2, type="regressor")
resettest(y2 ~ x, power=2, type="regressor")
q <- resettest(y2 ~ x, power=2, type="regressor")
View(q)
View(q)
print("asd")
print(q$statistic)
resettest
lmtest::resettest
read.csv('/tmp/x.csv')
w <- read.csv('/tmp/x.csv')
View(w)
w <- read.csv('/tmp/x.csv', header=FALSE, sep=",")
# Chunk 1: R1
options(prompt = "R> ", digits = 4)
options(continue=" ") #remove continuation prompt
setwd('/Users/nima/AAEC5126/HW2/')#change this directory as needed
options(width=60)#so R-chunks don't run over margin
library("xtable")  #you make have to install this first - simply open R, then choose "packages" /
#install packages"
set.seed(37)  #sets the random number generator so we can reproduce results
bmat1<-matrix(0, k, r1)
bmat1<-matrix(0, 2, 4)
?matrix
x1 <- rep(1, N)
x2 <- rnorm(N, 3, 1)
x3 <- rnorm(N, -2, 1)
sig <- 1
bvec<-c(1, .5, 1.2)
X1 <- cbind(x1, x2, x3)
k1 <- ncol(X1pop)
x2 <- rnorm(N, 3, 3)
x3 <- rnorm(N, -2, 3)
X2 <- cbind(x1, x2, x3)
k2 <- ncol(X1pop)
k1 <- ncol(X1)
x1 <- rep(1, N)
x2 <- rnorm(N, 3, 1)
x3 <- rnorm(N, -2, 1)
sig <- 1
bvec<-c(1, .5, 1.2)
X1 <- cbind(x1, x2, x3)
k1 <- ncol(X1)
x2 <- rnorm(N, 3, 3)
x3 <- rnorm(N, -2, 3)
X2 <- cbind(x1, x2, x3)
k2 <- ncol(X2)
# Chunk 1: R1
options(prompt = "R> ", digits = 4)
options(continue=" ") #remove continuation prompt
setwd('/Users/nima/AAEC5126/HW2/')#change this directory as needed
options(width=60)#so R-chunks don't run over margin
library("xtable")  #you make have to install this first - simply open R, then choose "packages" /
#install packages"
set.seed(37)  #sets the random number generator so we can reproduce results
# Chunk 2: R1
set.seed(37)
N <- 10000 #population size
n <- 1000 #sample size
r1 <- 500 #number of error vectors to draw
# Chunk 3: R2
x1 <- rep(1, N)
x2 <- rnorm(N, 3, 1)
x3 <- rnorm(N, -2, 1)
sig <- 1
bvec<-c(1, .5, 1.2)
X1 <- cbind(x1, x2, x3)
k1 <- ncol(X1)
x2 <- rnorm(N, 3, 3)
x3 <- rnorm(N, -2, 3)
X2 <- cbind(x1, x2, x3)
k2 <- ncol(X2)
# Chunk 4: R3
bmat1<-matrix(0, k, r1)
bmat2<-matrix(0, k, r1)
bmat3<-matrix(0, k, r1)
bmat4<-matrix(0, k, r1)
# Chunk 1: R1
options(prompt = "R> ", digits = 4)
options(continue=" ") #remove continuation prompt
setwd('/Users/nima/AAEC5126/HW2/')#change this directory as needed
options(width=60)#so R-chunks don't run over margin
library("xtable")  #you make have to install this first - simply open R, then choose "packages" /
#install packages"
set.seed(37)  #sets the random number generator so we can reproduce results
# Chunk 2: R1
set.seed(37)
N <- 10000 #population size
n <- 1000 #sample size
r1 <- 500 #number of error vectors to draw
# Chunk 3: R2
x1 <- rep(1, N)
x2 <- rnorm(N, 3, 1)
x3 <- rnorm(N, -2, 1)
sig <- 1
bvec<-c(1, .5, 1.2)
X1 <- cbind(x1, x2, x3)
k <- ncol(X1)
x2 <- rnorm(N, 3, 3)
x3 <- rnorm(N, -2, 3)
X2 <- cbind(x1, x2, x3)
x2 <- rnorm(N, 3, 4)
x3 <- rnorm(N, -2, 4)
X3 <- cbind(x1, x2, x3)
x2 <- rnorm(N, 3, 6)
x3 <- rnorm(N, -2, 6)
X4 <- cbind(x1, x2, x3)
# Chunk 4: R3
bmat1<-matrix(0, k, r1)
bmat2<-matrix(0, k, r1)
bmat3<-matrix(0, k, r1)
bmat4<-matrix(0, k, r1)
# Chunk 1: R1
options(prompt = "R> ", digits = 4)
options(continue=" ") #remove continuation prompt
setwd('/Users/nima/AAEC5126/HW2/')#change this directory as needed
options(width=60)#so R-chunks don't run over margin
library("xtable")  #you make have to install this first - simply open R, then choose "packages" /
#install packages"
set.seed(37)  #sets the random number generator so we can reproduce results
# Chunk 2: R1
set.seed(37)
N <- 1000 #population size
n <- 1000 #sample size
r1 <- 500 #number of error vectors to draw
# Chunk 3: R2
bvec<-c(1, .5, 1.2)
sig <- 1
x1 <- rep(1, N)
x2 <- rnorm(N, 3, 1)
x3 <- rnorm(N, -2, 1)
X1 <- cbind(x1, x2, x3)
k <- ncol(X1)
x2 <- rnorm(N, 3, 3)
x3 <- rnorm(N, -2, 3)
X2 <- cbind(x1, x2, x3)
x2 <- rnorm(N, 3, 4)
x3 <- rnorm(N, -2, 4)
X3 <- cbind(x1, x2, x3)
x2 <- rnorm(N, 3, 6)
x3 <- rnorm(N, -2, 6)
X4 <- cbind(x1, x2, x3)
# Chunk 4: R3
bmat1 <- matrix(0, k, r1)
bmat2 <- matrix(0, k, r1)
bmat3 <- matrix(0, k, r1)
bmat4 <- matrix(0, k, r1)
for (i in 1:r1){
eps <- rnorm(n, 0, sig)
y1 <- X1 %*% bvec + eps
y2 <- X2 %*% bvec + eps
y3 <- X3 %*% bvec + eps
y4 <- X4 %*% bvec + eps
b1 <- solve((t(X1)) %*% X1) %*% (t(X1) %*% y1)
b2 <- solve((t(X2)) %*% X2) %*% (t(X2) %*% y2)
b3 <- solve((t(X3)) %*% X3) %*% (t(X3) %*% y3)
b4 <- solve((t(X4)) %*% X4) %*% (t(X4) %*% y4)
bmat1[, i] <- b1
bmat2[, i] <- b2
bmat3[, i] <- b3
bmat4[, i] <- b4
}
# Chunk 5: RXX
bm1<-rowMeans(bmat1)
sd1<-c(sd(bmat1[1,]), sd(bmat1[2,]), sd(bmat1[3,]))
tt1<-data.frame(col1=c("constant", "x2", "x3"),
col2=bvec,
col3=bm1,
col4=sd1
)
colnames(tt1)<-c("variable","true value","mean (samp.dist.)","std (samp.dist)")
ttx1<- xtable(tt1, caption="Sampling distribution, std(x2)=std(x3)=1")
digits(ttx1)<-4   #decimals to be shown for each column
print(ttx1, include.rownames=FALSE,
latex.environment="center", caption.placement="top",table.placement="!h")
#get rid of row counters, and center over decimal)
#-----------------
bm2<-rowMeans(bmat2)
sd2<-c(sd(bmat2[1,]), sd(bmat2[2,]), sd(bmat2[3,]))
tt2<-data.frame(col1=c("constant", "x2", "x3"),
col2=bvec,
col3=bm2,
col4=sd2
)
colnames(tt2)<-c("variable","true value","mean (samp.dist.)","std (samp.dist)")
ttx2<- xtable(tt2, caption="Sampling distribution, std(x2)=std(x3)=3")
digits(ttx2)<-4   #decimals to be shown for each column
print(ttx2, include.rownames=FALSE,
latex.environment="center", caption.placement="top",table.placement="!h")
#get rid of row counters, and center over decimal)
#--------------------
bm3<-rowMeans(bmat3)
sd3<-c(sd(bmat3[1,]), sd(bmat3[2,]), sd(bmat3[3,]))
tt3<-data.frame(col1=c("constant", "x2", "x3"),
col2=bvec,
col3=bm3,
col4=sd3
)
colnames(tt3)<-c("variable","true value","mean (samp.dist.)","std (samp.dist)")
ttx3<- xtable(tt3, caption="Sampling distribution, std(x2)=std(x3)=4")
digits(ttx3)<-4   #decimals to be shown for each column
print(ttx3, include.rownames=FALSE,
latex.environment="center", caption.placement="top",table.placement="!h")
#get rid of row counters, and center over decimal)
#--------------------
bm4<-rowMeans(bmat3)
sd4<-c(sd(bmat4[1,]), sd(bmat4[2,]), sd(bmat4[3,]))
tt4<-data.frame(col1=c("constant", "x2", "x3"),
col2=bvec,
col3=bm4,
col4=sd4
)
colnames(tt4)<-c("variable","true value","mean (samp.dist.)","std (samp.dist)")
ttx4<- xtable(tt4, caption="Sampling distribution, std(x2)=std(x3)=6")
digits(ttx4)<-4   #decimals to be shown for each column
print(ttx4, include.rownames=FALSE,
latex.environment="center", caption.placement="top",table.placement="!h")
#get rid of row counters, and center over decimal)
# Chunk 6: R6
b21<- bmat1[2,]   #pick draws for b2 from first variance setting
b22<- bmat2[2,]
b23<- bmat3[2,]
b24<- bmat4[2,]
b31<- bmat1[3,]   #pick draws for b3 from first variance setting
b32<- bmat2[3,]
b33<- bmat3[3,]
b34<- bmat4[3,]
d21<-density(b21,kernel="epanechnikov", n=100) #get kernel density estimates, using Epanechnikov method and 100 evaluation points
# note: this "n" is not our sample size from above, and only used internally by the "density" function
d22<-density(b22,kernel="epanechnikov", n=100)
d23<-density(b23,kernel="epanechnikov", n=100)
d24<-density(b24,kernel="epanechnikov", n=100)
d31<-density(b31,kernel="epanechnikov", n=100) #get kernel density estimates, using Epanechnikov method and 100 evaluation points
# note: this "n" is not our sample size from above, and only used internally by the "density" function
d32<-density(b32,kernel="epanechnikov", n=100)
d33<-density(b33,kernel="epanechnikov", n=100)
d34<-density(b34,kernel="epanechnikov", n=100)
# Chunk 7: R7
par(mfrow=c(2,1))  #make two empty boxes
plot(d21,type="l",main = "",xlab = "b2",ylab = "density",
xlim=c(.4,.6),ylim=c(0,100),lwd=2)
lines(d22,col=2,lty=2,lwd=2)
lines(d23,col=3,lty=3,lwd=2)
lines(d24,col=4,lty=4,lwd=2)
labels<-c("std=0.5","std=1","std=2","std=4")
legend("topright", inset=.05,
labels, lwd=1, lty=c(1,2,3,4), col=c(1,2,3,4))
plot(d31,type="l",main = "",xlab = "b3",ylab = "density",
xlim=c(1.1,1.3),ylim=c(0,100),lwd=2)
lines(d32,col=2,lty=2,lwd=2)
lines(d33,col=3,lty=3,lwd=2)
lines(d34,col=4,lty=4,lwd=2)
labels<-c("std=0.5","std=1","std=2","std=4")
legend("topright", inset=.05,
labels, lwd=1, lty=c(1,2,3,4), col=c(1,2,3,4))
